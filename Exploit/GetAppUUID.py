import sys
import os
import pickle
from pathlib import Path
from pymobiledevice3 import usbmux
from pymobiledevice3.exceptions import NoDeviceConnectedError
from pymobiledevice3.lockdown import create_using_usbmux
from pymobiledevice3.services.installation_proxy import InstallationProxyService

def get_apps(service_provider):
    apps_json = InstallationProxyService(service_provider).get_apps(calculate_sizes=False)
    if not apps_json:
        print("No apps found on the device.")
        return None
    return apps_json

def load_apps_from_cache(cache_path):
    if os.path.exists(cache_path):
        try:
            with open(cache_path, 'rb') as cache_file:
                apps = pickle.load(cache_file)
                return apps
        except Exception as e:
            print(f"Failed to load apps from cache: {e}")
    return None

def save_apps_to_cache(apps, cache_path):
    try:
        with open(cache_path, 'wb') as cache_file:
            pickle.dump(apps, cache_file)
    except Exception as e:
        print(f"Failed to save apps to cache: {e}")

def find_app_path_by_bundle_id(apps_json, bundleid):
    for key, value in apps_json.items():
        if isinstance(value, dict) and "Path" in value:
            if value.get("CFBundleIdentifier") == bundleid:
                return Path(value["Path"])
    return None

def main():
    cache_path = None
    if len(sys.argv) >= 3:
        bundleid = sys.argv[1]
        cache_path = sys.argv[2]
    elif len(sys.argv) >= 2:
        bundleid = sys.argv[1]
    else:
        print("Not enough arguments passed.")
        return

    apps = load_apps_from_cache(cache_path) if cache_path else None

    if apps is None:
        try:
            connected_devices = usbmux.list_devices()
            if not connected_devices:
                print("No device connected!")
                print("Please connect your device and try again.")
                return
            
            device = connected_devices[0]
            service_provider = create_using_usbmux(serial=device.serial)
            apps = get_apps(service_provider)

            if apps is not None and cache_path:
                save_apps_to_cache(apps, cache_path)  # Save to cache if specified

        except NoDeviceConnectedError:
            print("No device connected!")
            print("Please connect your device and try again.")
            return
        except Exception as e:
            print(f"An error occurred while connecting to the device: {e}")
            return

    app_path = find_app_path_by_bundle_id(apps, bundleid) if apps else None
    if app_path:
        print(f"{app_path}")
    else:
        print(f"No app found with bundle ID: {bundleid}")

if __name__ == "__main__":
    main()
